<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\Microsoft.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.AspNet.WebPages.3.2.2\lib\net45\System.Web.Helpers.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Web.Helpers" #>
<#@ import namespace="Microsoft.CSharp.RuntimeBinder" #>
<#@ import namespace="System.IO" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #><#

var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var code = new CodeGenerationTools(this);

WriteHeader(fileManager);

string baseUri = "http://www.sendvia.co.uk/rest/alpha5";
string swaggerUri = baseUri + "/swagger/api-docs";
dynamic api_docs = Help.MakeRequest(swaggerUri);
List<dynamic> models = new List<dynamic>();
if(api_docs.swaggerVersion == "1.2")
{

	BeginWriteClassClient();
    foreach(var api in api_docs.apis)
    {
        string uri =swaggerUri + api.path;
        dynamic resource = Help.MakeRequest(uri);
        foreach(var apis in resource.apis)
        {
					
			try{
			
				foreach (var op in apis.operations)
				{	
					try{
						WriteOperation(op, apis.path.ToString());

					}catch(RuntimeBinderException){}
				}
				
			}catch(RuntimeBinderException ){}
           
        }

		try{
			
				foreach (var m in resource.models)
				{	
					models.Add(m);					
				}
			
		}catch(RuntimeBinderException ){}


    }

	EndWriteClassClient();


	foreach (var m in models)
	{
		try{
						
			if(Type.GetType("System." + m.Value.id.ToString())!=null) continue;						
			fileManager.StartNewFile(m.Value.id.ToString() + ".cs");
		
			WriteObjectModel(m.Value);

		}catch(RuntimeBinderException){}
	}
}




fileManager.Process();
#>
<#+

public void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// Hello
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

public void WriteObjectModel(dynamic objectModel)
{
#>using System;
using System.Collections.Generic;

namespace Net.Sendvia.Models
{
	public partial class <#=objectModel.id #>
	{<#+

		foreach(var prop in objectModel.properties)
		{
			 WriteProperty(prop.Value, prop.Key);
		}
	#>

	}
}<#+
}

public void BeginWriteClassClient()
{
#>
using System;
using System.Collections.Generic;
using RestSharp;
using Net.Sendvia.Models;

namespace Net.Sendvia
{

	public class Client : RestClient
	{

        private const string BaseUri = "https://www.sendvia.co.uk/rest/alpha5/";

        public Client(string client_Id, string client_secret) : base(BaseUri) 
        {
            this.Authenticator = new OAuth2Authenticator(client_Id, client_secret);
        }
	
<#+
}

public void EndWriteClassClient()
{
#>	
		private class OAuth2Authenticator :IAuthenticator
		{

			private const string BaseUri = "https://www.sendvia.co.uk/alpha5";

			private string _client_Id;
			private string _client_Secret;
			private OAuth2AuthorizationRequestHeaderAuthenticator _authenticator;
			private DateTime _expiry;

			public OAuth2Authenticator(string client_Id, string client_Secret)
			{
				this._client_Id = client_Id;
				this._client_Secret = client_Secret;
			}

			void IAuthenticator.Authenticate(IRestClient client, IRestRequest request)
			{
				if (_authenticator == null || DateTime.UtcNow > _expiry)
				{
					var authRequest = new RestRequest("/token", Method.POST);
					authRequest.AddParameter("client_id", _client_Id);
					authRequest.AddParameter("client_secret", _client_Secret);
					authRequest.AddParameter("grant_type", "client_credentials");
					authRequest.AddParameter("response_type", "token");
					RestClient rs = new RestClient(BaseUri);                
					var restResponse = rs.Post<OAuthTokens>(authRequest);
					_expiry = DateTime.UtcNow.AddSeconds(restResponse.Data.expires_in);
					_authenticator = new RestSharp.OAuth2AuthorizationRequestHeaderAuthenticator(restResponse.Data.access_token, restResponse.Data.token_type);              
				}
				_authenticator.Authenticate(client, request);
             
			}
		}

		 private class OAuthTokens
		{
			public string access_token { get; set; }
			public int expires_in { get; set; }
			public string refresh_token { get; set; }
			public string token_type { get; set; }
		}
	}
}<#+
}

public void WriteProperty(dynamic prop, string name)
{
	#>

		public <#=GetTypeString(prop)#> <#=name#>
		{get;set;}
	<#+
}

public void WriteOperation(dynamic op, string path)
{
	var rType = GetTypeString(op);	

#>		public <#=rType#> <#=op.nickname#>(<#+
	string comma = "";
	foreach(var param in op.parameters)
	{
		#><#=comma#><#=GetTypeString(param)#> <#=param.name#><#+
		
		comma =", ";
	}
#>)
		{
			var request = new RestRequest("<#=path#>", Method.<#=op.method#>){ RequestFormat = DataFormat.Json };
			<#+ foreach(var param in op.parameters)
			{
				var pn = GetTypeString(param);
				if(param.required == false && !(pn =="string" || pn.StartsWith("List"))   )
				{
			#>if(<#=param.name#>.HasValue)
			{
			<#+	
				}
				if(param.paramType.ToString() == "path")
				{
			#>	request.AddUrlSegment("<#=param.name#>", <#=param.name#>.ToString());
			<#+			
				}else if(param.paramType.ToString() == "body")
				{
			#>	request.AddBody(<#=param.name#>);
			<#+				
				}else if(param.paramType.ToString() == "query")
				{
					if(pn.StartsWith("List"))
					{
				#>if(<#=param.name#> != default(<#=GetTypeString(param)#>))
				{	
					foreach(var p in <#=param.name#> )
					{
						request.AddParameter("<#=param.name#>[]", p.ToString());
					}	
				}				
				<#+			
					}
					else
					{
				#>	request.AddParameter("<#=param.name#>", <#=param.name#>.ToString());
				<#+	
					}			
				}
				if(param.required == false && !(pn =="string" || pn.StartsWith("List"))   )
				{
			#>}
			<#+	
				}
			}
			if(rType=="void"){
			#>

			Execute(request);
<#+ }else if(rType=="string"){ #>

			return Execute(request).Content;
<#+ }else if(rType=="byte[]"){ #>

			return Execute<List<byte>>(request).Data.ToArray();
<#+ }else{ #>

			return Execute<<#=rType#>>(request).Data;
<#+ } #>
		}

<#+

}

public string GetTypeString(dynamic obj)
{
	var r = "";
	if(obj.type == null)
	{
		r = obj.dollarRef.ToString();
		return r;
	}
	if(obj.type.ToString() == "array")
	{
		if(obj.items.dollarRef != null)
		{
			r = "List<" + obj.items.dollarRef.ToString() + ">";
		}
		else if (obj.items.type == "string")
		{
			r =  obj.items.format.ToString() + "[]";
		}
		else
		{
			r =  obj.items.type.ToString();
		}
	}
	else
	{
		string s = obj.type.ToString();
		switch(s)
		{
			case "integer" :
				r = "int"; break;
			case "boolean" :
				r = "bool"; break;
			case "number" :
				r = "decimal"; break;
			default :
				r = obj.type.ToString(); break;
		}
		if(obj.required == false && r != "string")
		{
			r = r + "?";
		}
		if(obj.format != null)
		{
			string s0 = obj.format.ToString();
			switch(s0)
			{
				case "date-time" :
					r = "DateTime?"; break;				
				default :
					r = r; break;
			}
		}
		
	}

	return r;
}


#>
<#+ 
public class Help
{
	
	
	public static dynamic MakeRequest(string requestUrl)
    {
        try
        {
            HttpWebRequest request = WebRequest.Create(requestUrl) as HttpWebRequest;
            using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
            {
                if (response.StatusCode != HttpStatusCode.OK)
                    throw new Exception(String.Format(
                    "Server error (HTTP {0}: {1}).",
                    response.StatusCode,
                    response.StatusDescription));

                using (Stream stream = response.GetResponseStream())
                {
                    StreamReader reader = new StreamReader(stream, Encoding.UTF8);
                    return Json.Decode(reader.ReadToEnd().Replace("$ref", "dollarRef"));
                }                   
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return null;
        }
	}
}
#>